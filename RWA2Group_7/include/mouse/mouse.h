/**
 * @file mouse.h
 * @author Jeffin(jeffinjk@umd.edu) Pradip(pradip@umd.edu) Hemanth(hemanth1@umd.edu)
 * @brief The file contains the Mouse class
 * @version 0.1
 * @date 2021-11-13
 *
 * @copyright Copyright (c) 2021
 *
 */

 /*! \mainpage Maze search algorithm
  *
  * This project consists of searching a path in a maze
  * and then task a mouse (robot) to follow the path.
  * - \subpage searchingPathPage "Searching a path"
  *
  * - \subpage followingPathPage "Following a path"
  *
  */

  /*! \page searchingPathPage Searching a path
   *
   * The search algorithm used for searching a path in a maze relies on
   * the depth-first search (DFS) approach. This algorithm is implemented in rwa2::Mouse::search_maze()
   *
   */

   /*! \page followingPathPage Following a path
    *
    * To follow a path generated by DFS, methods from the class API (api/api.h) must be used to interact
    * with the micromouse simulator.
    * - Methods of the API class are documented <a href="https://github.com/mackorone/mms#summary">here</a>.
    */


#ifndef MICROMOUSE_H
#define MICROMOUSE_H

#include "../node/node.h"
#include "../util/util.h"
#include <array>
#include<utility>
#include<stack>
#include<vector>

namespace rwa2 {
    /**
     * @brief This class is used to compute a path and execute the path.
     *
     */
    class Mouse {
        public:

        void set_g_position(std::pair<int,int>x) // mutator to set goal position in main.cpp
        {
            g_position = x;
        }


        /**
         * @brief Construct a new MicroMouse object
         *
         * The robot is always at (0,0) and facing NORTH when the simulator starts
         */
        Mouse() :m_position{0,0}, m_direction{ direction::NORTH } {
            //initialize the maze by placing around the perimeter of the maze
            for (int x = 0; x < m_maze_width; x += 1) {
                for (int y = 0; y < m_maze_height; y += 1) {
                    m_maze.at(x).at(y).set_wall(direction::NORTH, (y == m_maze_height - 1));
                    m_maze.at(x).at(y).set_wall(direction::EAST, (x == m_maze_width - 1));
                    m_maze.at(x).at(y).set_wall(direction::SOUTH, (y == 0));
                    m_maze.at(x).at(y).set_wall(direction::WEST, (x == 0));
                }
            }
        }
        // this method visually sets the walls in the simulator
        void display_walls();
        //IMPLEMENT THE METHODS BELOW
        //Note: Come up with your own parameters and implementations
        /**
         * @brief Implement DFS to compute a path between 2 nodes in a maze
         *
         * @return true A path is found
         * @return false A path is not found
         */
        bool search_maze();
        /**
         * @brief Make the mouse move forward
         *
         */
        void move_forward();
        /**
         * @brief Make the mouse rotate 90 deg CCW
         *
         */
        void turn_left();
        /**
         * @brief Make the mouse rotate 90 deg CW
         *
         */
        void turn_right();
        /**
         * @brief Update the walls in the maze and highlight the walls in the simulator
         * 
         */
        void update_wall();
        /**
         * @brief Move the robot from the current position to goal position. this 
         * 
         */
        void move_to_goal();
        /**
         * @brief Function to clear stack and vector
         * 
         */
        void clear_stack_vector();



        private:
        static const int m_maze_width{ 16 }; //width of the maze
        static const int m_maze_height{ 16 };//height of the maze
        std::pair<int,int> m_position; // pair of x position and y position of robot in maze
        std::pair<int,int> g_position; // pair of x position and y position of goal in maze
        int m_direction; //direction of the robot in the maze
        std::vector<std::pair<int,int>>m_vector; // vector to store list of visited node during DFS
        std::stack<std::pair<int,int>>m_stack; // stack to store path found by DFS
        std::stack<std::pair<int,int>> m_reverse; //reverse stack        
        std::pair<int,int>m_trial_pair; //to check potential next position
        std::array<std::array<Node, m_maze_width>, m_maze_height> m_maze; //2D array maze object
    };
}
#endif